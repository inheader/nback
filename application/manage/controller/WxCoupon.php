<?php
/**
 * Created by PhpStorm.
 * User: Lyunp
 * Date: 2019/10/30
 * Time: 8:40
 */

namespace app\manage\controller;


use app\common\model\AppConfig;
use app\common\model\AreaMallWeiCoupon;
use app\common\model\AreaMallWeiCouponBuyerLog;
use app\common\model\Buyer;
use think\Db;
use think\exception\PDOException;

class WxCoupon extends Manage
{

    protected $appId; //公用ID

    protected $secret; //

    protected $mchId; //商户号

    protected $keys;

    protected $sUrl         = "https://api.mch.weixin.qq.com/mmpaymkttransfers/send_coupon"; //发送代金券
    protected $tUrl         = "https://api.mch.weixin.qq.com/mmpaymkttransfers/query_coupon_stock";//查询代金券批次信息
    protected $dUrl         = "https://api.mch.weixin.qq.com/mmpaymkttransfers/query_coupon_stock";//查询代金券信息

    //初始化
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        //读取小程序配置项
        $wx = (new AppConfig())->find();
        $this->appId    = $wx->wx_app_id;//'wx57eac30efa06649b';//
        $this->secret   = $wx->wx_app_secret;//'793148eabb50ef568fe3fc70431b3760';//
        $this->mchId    = $wx->wx_mchid;//'1547208881';//
        $this->keys     = $wx->wx_pay_key;//'kjhkj34hr5kh2lk1l23h2lk342lk34kl';//
    }

    //代金券显示
    public function index()
    {

        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where = [];
                list($where,$page,$limit,$order) = [$where,$params['page'],$params['limit'],'id desc'];
                $list = (new AreaMallWeiCoupon())
                    ->where($where)
                    ->page($page,$limit)
                    ->order($order)
                    ->select();
                $total = (new AreaMallWeiCoupon())
                    ->where($where)
                    ->count();
                foreach ($list as $key=>$item) {
                    $list[$key]['create_time'] = date("Y-m-d",$item['create_time']);
                }
                $result = array("code"=>0,"count" => $total, "data" => $list);
                return json($result);
            }
            return [];
        }

        return $this->view->fetch();
    }

    //代金券预创建
    public function add()
    {
        $this->view->engine->layout(false);
        if($this->request->isPost())
        {
            $params =  $this->request->param();
            if($params)
            {
                $detail = $this->get_wx_coupon_detail($params['coupon_stock']);
                $rsxml = xmlToArray($detail);
                if($rsxml)
                {
                    if($rsxml['return_code'] == 'SUCCESS' && $rsxml['result_code'] == 'SUCCESS')
                    {
                        //检测是否有重复劵创建，创建提示警告
                        $get = AreaMallWeiCoupon::get(['coupon_id'=>$params['coupon_stock']]);
                        if($get)
                            return ['status'=>false,'msg'=>'存在相同代金券'];
                        $data = [
                            'coupon_id'             => $rsxml['coupon_stock_id'],//代金券ID
                            'coupon_nick'           => $params['coupon_nick'],//代金券别名
                            'coupon_name'           => $rsxml['coupon_name'],//代金券名称
                            'coupon_price'          => $rsxml['coupon_value'] / 100,//代金券面值
                            'coupon_limit_price'    => $rsxml['coupon_mininumn'] / 100,//
                            'coupon_stock_status'   => $rsxml['coupon_stock_status'],//代金券使用最低限额
                            'coupon_total'          => $rsxml['coupon_total'],//代金券数量
                            'coupon_max_total'      => $rsxml['max_quota'],//代金券每个人最多能领取的数量, 如果为0，则表示没有限制
                            'coupon_budget'         => $rsxml['coupon_budget'],//代金券预算额度
                            'coupon_stock_desc'     => isset($rsxml['coupon_stock_desc']) ? $rsxml['coupon_stock_desc'] : '',//代金券预算额度
                            'is_send_num'       => $rsxml['is_send_num'],
                            'begin_time'        => $rsxml['begin_time'],
                            'end_time'          => $rsxml['end_time'],
                            'create_time'       => $rsxml['create_time'],
                        ];
                        Db::startTrans();
                        try{
                            (new AreaMallWeiCoupon())->insert($data);
                            Db::commit();
                            return ['status'=>true,'msg'=>'创建成功'];
                        }catch (PDOException $e){
                            Db::rollback();
                            return ['status'=>false,'msg'=>'创建失败'.$e->getMessage()];
                        }

                    }

                }else{
                    return ['status' =>false,'msg'=>'预创建失败，请检查代金券ID是否存在'];
                }
            }
        }

        return $this->view->fetch();
    }

    /**
     * 请求优惠劵详情
     * @param int $stockId
     * @return array
     */
    public function get_wx_coupon_detail($stockId=0)
    {
        //组装参数
        $params = [
            'appid' => $this->appId,//公众账号ID
            'coupon_stock_id' => $stockId,//代金券批次id
            'mch_id' => $this->mchId,//商户号
            'nonce_str' => random(18),//随机字符串
//            'openid' => $this->getUserInfo()->wx_open_id,//用户openid
//            'openid_count' => 2,//openid记录数
//            'partner_trade_no' => $this->mchId.date("Ymd").$this->getUserInfo()->buyer_id,//商户单据号
        ];
        return $this->params_data($this->tUrl,$params,false);
    }


    //代金券编辑
    public function edit()
    {
        return $this->view->fetch();
    }

    //代金券详情
    public function detail($cid=null)
    {
        $this->view->engine->layout(false);
        $cid = isset($cid) ? $cid : $this->request->param();
        $get = [];
        if($cid)
            $get = AreaMallWeiCoupon::get(['coupon_id'=>$cid]);
        $get['begin_time'] = date("Y-m-d",$get['begin_time']);
        $get['end_time'] = date("Y-m-d",$get['end_time']);
        $this->assign('coupon',$get);
        return $this->view->fetch();
    }

    //发送
    public function send($cid=null)
    {
        $this->view->engine->layout(false);
        $cid = isset($cid) ? $cid : $this->request->param('cid');
        $this->assign('cid',$cid);
        return $this->view->fetch();
    }

    //我的代金券用户
    public function my_user()
    {
        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where = [];
                //获取已发送的用户
                $where[] = ['buyer_tel','NOT NULL'];
                if(isset($params['key']))
                {
                    $where[] = ['buyer_id|buyer_tel|buyer_name','like','%'.$params['key']['keyword'].'%'];
                }
                list($where,$page,$limit) = [$where,$params['page'],$params['limit']];
                //获取可发送用户
                $list = (new Buyer())
                    ->where($where)
                    ->page($page,$limit)
                    ->field('buyer_id,buyer_tel,buyer_name,wx_open_id')
                    ->select();
                $coupon = (new AreaMallWeiCoupon())->where('coupon_id',$params['cid'])->field('coupon_max_total')->find();
                foreach ($list as $buy=>$item) {
                    //根据用户ID查询用户的领取数量
                    $buyerNum = (new AreaMallWeiCouponBuyerLog())->where(['coupon_stock_id'=>$params['cid'],'buyer_id'=>$item['buyer_id']])->count('buyer_id');
                    if($coupon['coupon_max_total'] == $buyerNum)
                    {
                        unset($list[$buy]);
                    }
                }
                $totals = (new Buyer())
                    ->where($where)
                    ->select();
                foreach ($totals as $num=>$total) {
                    //根据用户ID查询用户的领取数量
                    $buyerNum = (new AreaMallWeiCouponBuyerLog())->where(['coupon_stock_id'=>$params['cid'],'buyer_id'=>$item['buyer_id']])->count('buyer_id');
                    if($coupon['coupon_max_total'] == $buyerNum)
                    {
                        unset($list[$num]);
                    }
                }
                $total = count($totals);
                $result = array("code"=>0,"count" => $total, "data" => $list);
                return json($result);
            }
            return [];
        }
        return [];
    }

    //发劵提交
    public function send_post()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                //分析选中用户
                if(isset($params['data']))
                {
                    foreach ($params['data'] as $key=>$val) {
                        $datas = [
                            'appid' => $this->appId,//公众账号ID
                            'coupon_stock_id' => $params['cid'],//代金券批次id
                            'mch_id' => $this->mchId,//商户号
                            'nonce_str' => random(18),//随机字符串
                            'openid' => $val['wx_open_id'],//$val['wx_open_id'],//用户openid
                            'openid_count' => 3,//openid记录数
                            'partner_trade_no' => $this->mchId.date("YmdHis").$val['buyer_id'],//商户单据号$val['buyer_id']
                        ];
                        $xres = $this->params_data($this->sUrl,$datas,true);
                        $result = xmlToArray($xres);
                        if($result)
                        {
                            if($result['return_code'] == 'SUCCESS' && $result['ret_code'] == 'SUCCESS')
                            {
                                //发送成功计入领取记录
                                Db::startTrans();
                                try{
                                    $arr = [
                                        'partner_trade_no'  => $result['partner_trade_no'],
                                        'nonce_str'         => $result['nonce_str'],
                                        'coupon_id'         => $result['coupon_id'],
                                        'coupon_stock_id'   => $result['coupon_stock_id'],
                                        'buyer_id'      => $val['buyer_id'],
                                        'num'           => $result['resp_count'],
                                        'coupon_time'           => time(),
                                    ];
                                    (new AreaMallWeiCouponBuyerLog())->insert($arr);
                                    //更新领取数量
                                    (new AreaMallWeiCoupon())->where('coupon_id',$result['coupon_stock_id'])->setInc('is_send_num');
                                    Db::commit();
                                    return ['status'=>true,'msg'=>'发送成功'];
                                }catch (PDOException $e)
                                {
                                    Db::rollback();
                                    return ['status'=>false,'msg'=>'发送失败'];
                                }
                            }else{
                                return ['status'=>false,'msg'=>'代金券领取异常'.$result['err_code_des']];
                            }
                        }else{
                            return ['status'=>false,'msg'=>'发劵异常'];
                        }
                    }
                }
            }
        }
        return [];
    }

    //领取记录
    public function log($cid=null)
    {
        $this->view->engine->layout(false);
        $cid = isset($cid) ? $cid : $this->request->param('cid');
        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where = [];
                $where['coupon_stock_id'] = $params['cid'];
                list($where,$page,$limit) = [$where,$params['page'],$params['limit']];
                $list = (new AreaMallWeiCouponBuyerLog())
                    ->where($where)
                    ->page($page,$limit)
                    ->select();
                $total = (new AreaMallWeiCouponBuyerLog())
                    ->where($where)
                    ->count();
                foreach ($list as $key=>$item) {
                    $list[$key]['buyer_name'] = (new Buyer())->where('buyer_id',$item['buyer_id'])->field('buyer_name')->find()['buyer_name'];
                }
                $result = array("code"=>0,"count" => $total, "data" => $list);
                return json($result);
            }
        }
        $this->assign('cid',$cid);
        return $this->view->fetch();
    }

    public function logs()
    {

    }

    /**
     * 参数配置
     * @param string $url
     * @param array $params
     * @param $is_ssl
     * @return array
     */
    public function params_data($url="",$params=[],$is_ssl=false)
    {
        ksort($params);
        $string1 = '';
        foreach($params as $k => $v) {
            $string1 .= "{$k}={$v}&";
        }
        $string1 .= 'key='.$this->keys;
        $params['sign'] = strtoupper(md5($string1));
        $xml = arrayToXml($params);
        $extras = array();
        if($is_ssl)
        {
            //此处为证书位置（绝对路径），改成适合自己的，我这里放的比较那啥。。。。忽略///pxjiancai.com  pxback
            $extras['CURLOPT_SSLCERT'] = dirname(ROOT_PATH).'/pxjiancai.com/' . 'cret/apiclient_cert.pem';
            $extras['CURLOPT_SSLKEY']  = dirname(ROOT_PATH).'/pxjiancai.com/' . 'cret/apiclient_key.pem';
        }
        $res = CurlPostSsl($url,$xml,$extras);
        return $res;
    }

}