<?php
/**
 * Created by PhpStorm.
 * User: Lyunp
 * Date: 2019/9/11
 * Time: 14:40
 */

namespace app\mall\controller;


use app\common\controller\Mall;
use app\common\model\Buyer;
use app\common\model\OrderCommon;
use app\common\model\OrderGoods;
use app\common\model\OrderReturn;
use app\common\model\OrderReturnApply;
use app\common\model\OrderReturnGoods;
use app\common\model\OrderReturnTable;
use app\common\model\OrderReturnTableGoods;
use function GuzzleHttp\Psr7\try_fopen;
use think\Cache;
use think\Db;
use think\Exception;
use think\exception\PDOException;

/**
 * 退货制单类
 * Class ReturnGoods
 * @package app\mall\controller
 */
class ReturnGoods extends Mall
{

//    protected $model = null;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
//        $this->model = model('OrderReturnApply');
    }


    /**
     * 查看
     * @return array|mixed|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function index()
    {

        //获取权限的筛选条件
        $userWhere = $this->getMyUserWhere();
        $areaId = isset($userWhere[self::PERMISSION_MALL]) ? $userWhere[self::PERMISSION_MALL] : 0;
        if(empty($areaId)){
            return [
                'status' => false,
                'msg' => '只有区域管理员才有权限打开此界面'
            ];
        }

        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where = [];
                $page = $this->request->param('page');
                $limit = $this->request->param('limit');
                $where['mall_id'] = $areaId;
                list($where,$page,$limit) = [$where,$page,$limit];

                $list = (new OrderReturnApply())
                    ->where($where)
                    ->order('id','desc')
                    ->page($page,$limit)
                    ->select();

                $total = (new OrderReturnApply())
                    ->where($where)
                    ->count();
                foreach ($list as $key=>$val) {
                    //检测是否制单成功 并且生成了退货单信息 新增区分字段
                    $count = (new OrderReturnApply())->checkBuyerReturnTable($val['id']);
                    if($count > 0)
                    {
                        $list[$key]['off'] = 1;
                    }else{
                        $list[$key]['off'] = 0;
                    }
                    $list[$key]['createTime'] = date("Y-m-d H:i:s",$val['create_time']);
                }
                $result = array("code"=>0,"count" => $total, "data" => $list);

                return json($result);
            }
        }

        return $this->fetch();
    }

    /**
     * 退货单
     * @return array|mixed|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function lists()
    {
        //获取权限的筛选条件
        $userWhere = $this->getMyUserWhere();
        $areaId = isset($userWhere[self::PERMISSION_MALL]) ? $userWhere[self::PERMISSION_MALL] : 0;
        if(empty($areaId)){
            return [
                'status' => false,
                'msg' => '只有区域管理员才有权限打开此界面'
            ];
        }

        if($this->request->isAjax())
        {
            $where = [];
            $page = $this->request->param('page');
            $limit = $this->request->param('limit');
            $where['mall_id'] = $areaId;

            $keyword = $this->request->param('key');
            if( isset($keyword['buyer_id']) && !empty($keyword['buyer_id']))
            {
                $where['buyer_id'] = ['buyer_id','eq',$keyword['buyer_id']];
            }
            if( isset($keyword['order_id']) && !empty($keyword['order_id']))
            {
                $where['order_sn'] = ['order_sn','eq',$keyword['order_id']];
            }
            list($where,$page,$limit) = [$where,$page,$limit];
            $list = (new OrderReturnTable())
                ->where($where)
                ->order('id','desc')
                ->page($page,$limit)
                ->select();
            $total = (new OrderReturnTable())
                ->where($where)
                ->count();
            foreach ($list as $key=>$val) {
                $list[$key]['createdTime']  = date("Y-m-d H:i:s",$val['create_time']);
                $list[$key]['refundTime']  = $val['refund_time'] > 0 ? date("Y-m-d H:i:s",$val['refund_time']) : '暂无日期';
                $list[$key]['refundType']   = OrderReturnTable::pay_code_type($val['refund_type']);
                $list[$key]['buyerName']    = OrderReturnTable::get_buyer_name($val['buyer_id'])->buyer_name;
                $list[$key]['siteName']    = OrderReturnTable::get_site_name($val['site_id'])->site_name;
            }
            $result = array("code"=>0,"count" => $total, "data" => $list);
            return json($result);
        }

        return $this->fetch();
    }

    /**
     * 操作退货
     * @return array
     * @throws Exception\DbException
     */
    public function clickRefund()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                $get = OrderReturnTable::where(['status'=>0])->get($params['id']);
                if(!$get)
                    return ['status'=>false,'msg'=>'暂无该退款单'];

                $url = "https://api.pxjiancai.com/job/wx/refund?_ajax=PxReFun&data=".$get['return_sn'];
                $res = $this->request_by_curl($url, []);
                $data = json_decode($res,true);
                if($data['code'] == 20000)
                {
                    return ['status'=>true,'msg'=>'操作成功','data'=>$data];
                }else{
                    return ['status'=>false,'msg'=>'操作失败','data'=>$data];
                }

            }
        }
        return [];
    }

    /**
     * 取消退货
     * @return array
     * @throws Exception
     * @throws Exception\DbException
     */
    public function no_refund()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                $get = OrderReturnTable::where(['status'=>0])->get($params['id']);
                if(!$get)
                    return ['status'=>false,'msg'=>'暂无该退款单'];
                Db::startTrans();
                try{
                    //取消退款操作
                    (new OrderReturnTable())->where(['id'=>$get['id']])->update(['status'=>2]);
                    //取消成功移除退货的商品
                    (new OrderReturnTableGoods())->where(['site_id'=>$get['site_id'],'bind_bn'=>$get['bind_sn']])->delete();
                    Db::commit();
                    return ['status'=>true,'msg'=>'取消成功'];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'取消失败'];
                }
            }
        }
        return [];
    }

    /**
     * 请求curl
     * @param $remote_server
     * @param $post_string
     * @return mixed
     */
    public function request_by_curl($remote_server, $post_string) {

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $remote_server);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array ('Content-Type: application/json;charset=utf-8'));
        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // 线下环境不用开启curl证书验证, 未调通情况可尝试添加该代码
        curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $data = curl_exec($ch);
        curl_close($ch);

        return $data;
    }

    /**
     * 审核通过 清点货物
     * @throws \think\Exception
     */
    public function on()
    {
        if($this->request->isPost())
        {
            $id = $this->request->param('id');
            if($id)
                $get = (new OrderReturnApply())->getInfo($id);
            Db::startTrans();
            try{
                (new OrderReturnApply())->where('id',$get['id'])->update(['status'=>1]);
                Db::commit();
                return ['status'=>true,'msg'=>'操作成功'];
            }catch (PDOException $e){
                Db::rollback();
                return ['status'=>false,'msg'=>'操作失败'];
            }
        }
        return ['status'=>false,'msg'=>'error'];
    }

    /**
     * 审核拒绝
     * @return array
     * @throws \think\Exception
     */
    public function off()
    {
        if($this->request->isPost())
        {
            if($this->request->isPost())
            {
                $id = $this->request->param('id');
                if($id)
                    $get = (new OrderReturnApply())->getInfo($id);
                Db::startTrans();
                try{
                    (new OrderReturnApply())->where('id',$get['id'])->update(['status'=>3]);
                    Db::commit();
                    return ['status'=>true,'msg'=>'操作成功'];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'操作失败'];
                }
            }
            return ['status'=>false,'msg'=>'error'];
        }
    }

    /**
     * 第一步 选择商品
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function step()
    {
        if($this->request->isGet())
        {
            $params = $this->request->param();
            if(isset($params['id']))
            {
                $get = OrderReturnApply::get($params['id']);
                $get['buyer_name'] = (new Buyer())->where('buyer_id',$get['buyer_id'])->find()->buyer_name;
                $this->assign('get',$get);
            }
        }

        return $this->fetch();
    }

    /**
     * 获取订单商品
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function step_order_goods()
    {
        if($this->request->isAjax())
        {
            $where = [];
            $page  = $this->request->param('page');
            $limit = $this->request->param('limit');
            $buyerId = $this->request->param('buyerId');

            $keyword = $this->request->param('keyword','');
            if(isset($keyword))
            {
                $where[] = ['goods_name|goods_bn','like',$keyword.'%'];
            }
            list($where,$page,$limit) = [$where,$page,$limit];
            //查询订单
            $orderList = (new OrderCommon())->where(['buyer_id'=>$buyerId])->whereIn('order_state',[40,50,60])->order('order_add_time desc')->select()->toArray();
            if(empty($orderList))
            {
                return json(['code'=>0,'count'=>0,'data'=>[]]);
            }else{
                $list = [];
                foreach ($orderList as $key=>$val) {
                    $list[]  = (new OrderGoods())->where('order_id',$val['order_id'])->where($where)->select()->toArray();
                }
                $result = array_reduce($list, function ($result, $value) {
                    return array_merge($result, array_values($value));
                }, array());

                foreach ($result as $k=>$v) {
                    //对比已经退货的商品或相应的数量
                    $goods_table_list = (new OrderReturnTableGoods())->where(['order_id'=>$v['order_id'],'order_osp_id'=>$v['osp_id']])->select()->toArray();
                    $num = 0;
                    if($goods_table_list)
                    {
                        //查看自主申请退货单 成功的
//                        $returnGoods = (new OrderReturn())->where(['order_id'=>$v['order_id'],'status'=>4])->select();
//                        if($returnGoods)
//                        {
//                            foreach ($returnGoods as $ret=>$res) {
//                                //获取商品退货数量
//                                $goods = (new OrderReturnGoods())->where(['return_id'=>$res['return_id'],'osp_id'=>$v['osp_id']])->find();
//                                if($goods['osp_id'] == $v['osp_id'])
//                                {
//                                    $returnNum += $goods['return_num']; //具体退货商品数量
//                                }
//                            }
//                        }
                        foreach ($goods_table_list as $g=>$good) {
                            $num += $good['goods_return_num'];
                        }
                        if(($v['goods_send_num'] - $num) <= 0)
                        {
                            unset($result[$k]);
                        }else{
                            $result[$k]['goods_num'] = $v['goods_num'] - $num;
                        }
                        if(($v['goods_send_num'] - $num) != 0)
                        {
                            $result[$k]['order_sn'] = OrderCommon::get(['order_id'=>$v['order_id']])->order_sn;
                        }
                    }else{
                        $result[$k]['order_sn'] = OrderCommon::get(['order_id'=>$v['order_id']])->order_sn;
                    }
                }
                $page = ($page-1)*$limit;
                $pageNum = count($result);
                $list = array_slice($result,$page,$limit);
                $results = array("code"=>0,"count" => $pageNum, "data" => $list);
                return json($results);
            }

        }

        return [];
    }

    /**
     * @param null $keywords
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getByKeywords($keywords=null)
    {
        $keywords = isset($keywords) ? $keywords : $this->request->param('keywords');
        $where[] = ['buyer_tel','<>',""];
        $where[] = ['buyer_name|buyer_id','like',$keywords.'%'];
        $buyer = (new Buyer())->where($where)->select();
        return ['count'=>count($buyer),'dataList'=>$buyer];
    }

    /**
     * 加入退货商品
     * @return array
     */
    public function step_add_goods()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                if(isset($params['goods']) && !empty($params['goods']))
                {
                    //退货商品
                    $data = [];
                    foreach ($params['goods'] as $k=>$v) {
                        $data[] = [
                            'mall_id'       => $v['mall_id'],
                            'site_id'       => $v['site_id'],
                            'order_id'      => $v['order_id'],
                            'order_osp_id'  => $v['osp_id'],
                            'goods_id'      => $v['goods_id'],
                            'goods_bn'      => $v['goods_bn'],
                            'goods_name'        => $v['goods_name'],
                            'osp_price'         => $v['osp_price'],
                            'osp_price_sum'     => $v['osp_price_sum'],
                            'goods_num'         => $v['goods_num'],
                            'goods_return_num'      => $v['goods_num'],
                            'created_at'            => date("Y-m-d H:i:s"),
                        ];
                        $orderIds[] = [
                            'order_id'      => $v['order_id'],
                        ];
                    }

                    //获取单一的订单ID 去重
//                    $orderIds = array_unique($orderIds, SORT_REGULAR);
//                    //根据订单ID查询订单信息 组装入库数据
//                    foreach ($orderIds as $key=>$val) {
//                        //获取订单
//                        $order = (new OrderCommon())->where('order_id',$val['order_id'])->find();
//                        //入库
//                        $dataTable[] = [
//                            'return_sn' => $order['site_id'] . date('Ymd') . rand(10000, 99999),
//                            'mall_id' => $order['mall_id'],
//                            'site_id' => $order['site_id'],
//                            'buyer_id' => $order['buyer_id'],
//                            'order_id' => $order['order_id'],
//                            'order_sn' => $order['order_sn'],
//                            'refund_price' => 0,
//                            'refund_type' => $order['order_payment_code'],
//                            'create_time' => time(),
//                        ];
//
//                    }
//                    //获取根据购买商品获取商品信息
//                    foreach ($orderOspIds as $key1=>$val1) {
//                        $goods = (new OrderGoods())->where('osp_id',$val1['order_osp_id'])->find();
//                        //组装
//                        dump($goods);
//                    }

                }
//                dump($data);
//                exit;
                Db::startTrans();
                try{
//                    //生成退货单
//                    (new OrderReturnTable())->insertAll($dataTable);
                    //创建退货商品
//                    (new OrderReturnTableGoods())->insertAll($data,true);
                    Db::commit();
                    return ['status'=>true,'msg'=>'操作成功','data'=>urlencode(json_encode($data))];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'操作失败'];
                }
            }
            return ['status'=>false,'msg'=>'操作失败'];
        }
        return [];
    }


    /**
     * @return mixed
     */
    public function step_1()
    {
        $params = $this->request->param();
        $data = [];
        if(isset($params['goods']) && !empty($params['goods']))
        {
            //url解码
            $good = urldecode($params['goods']);
            $goodsList = json_decode($good,true);
            foreach ($goodsList as $good=>$goods) {
                $data[] = [
                    'buyer_id'      => $params['buyerId'],
                    'mall_id'       => $goods['mall_id'],
                    'site_id'       => $goods['site_id'],
                    'order_id'      => $goods['order_id'],
                    'order_osp_id'  => $goods['order_osp_id'],
                    'goods_id'      => $goods['goods_id'],
                    'goods_bn'      => $goods['goods_bn'],
                    'goods_name'    => $goods['goods_name'],
                    'osp_price'     => $goods['osp_price'],
                    'osp_price_sum'    => $goods['osp_price_sum'],
                    'goods_num'     => $goods['goods_num'],
                    'goods_return_num'     => $goods['goods_num'],
                ];
            }
        }
        $this->assign('goodsData',$data);
        return $this->fetch();
    }

    /**
     * 获取商品
     * @return array|\think\response\Json\
     */
    public function step_1_order_return_goods()
    {
        if($this->request->isAjax())
        {
            $where = [];
            $params = $this->request->param();
            if($params)
            {
                $goods = json_decode($params['goods'],true);
                list($where,$page,$limit) = [$where,$params['page'],$params['limit']];
                foreach ($goods as $k=>$v) {
                    $goods[$k]['order_sn'] = OrderCommon::get(['order_id'=>$v['order_id']])->order_sn;
                }
                $page = ($page-1)*$limit;
                $pageNum = count($goods);
                $list = array_slice($goods,$page,$limit);
                $results = array("code"=>0,"count" => $pageNum, "data" => $list);
                return json($results);
            }

        }
        return [];
    }

    /**
     * 修改商品数量
     * @return array
     * @throws \think\Exception
     */
    public function step_1_update_goods_num()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                //检测修改数量是否大于购买商品数量
                $res = (new OrderReturnTableGoods())->check_goods_num($params['osp_id'],$params['goods_return_num']);
                if($res === false)
                {
                    return ['status'=>false,'msg'=>'修改数量超出'];
                }
                Db::startTrans();
                try{
                    (new OrderReturnTableGoods())->where(['id'=>$params['id'],'order_osp_id'=>$params['osp_id']])->update(['goods_num'=>$params['goods_num']]);
                    Db::commit();
                    return ['status'=>true,'msg'=>'修改成功'];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'修改失败'];
                }
            }
        }
        return [];
    }


    /**
     * 添加商品退货单
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function step_1_add_goods()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
//                if(isset($params['aid']))
//                {
//                    //判断是否存在买家申请列
//                    $apply = OrderReturnApply::get($params['aid']);
//                    if(!$apply)
//                    {
//                        return ['status'=>false,'msg'=>'买家申请退货不存在'];
//                    }
//                }
                $data = [];
                $orderIds = [];
                $dataTable = [];
                if(isset($params['goods']) && !empty($params['goods']))
                {
                    $bindSn = 'BD'.rand(10000, 99999);
                    foreach ($params['goods'] as $k=>$v) {
                        $data[] = [
                            'mall_id'           => $v['mall_id'],
                            'site_id'           => $v['site_id'],
                            'order_id'          => $v['order_id'],
                            'order_osp_id'      => $v['order_osp_id'],
                            'goods_id'          => $v['goods_id'],
                            'goods_bn'          => $v['goods_bn'],
                            'goods_name'        => $v['goods_name'],
                            'osp_price'         => $v['osp_price'],
                            'osp_price_sum'     => $v['osp_price_sum'],
                            'goods_num'         => $v['goods_num'],
                            'bind_bn'           => $bindSn,
                            'goods_return_num'      => $v['goods_return_num'],
                            'created_at'            => date("Y-m-d H:i:s"),
                        ];

                        $orderIds[] = [
                            'order_id' => $v['order_id'],
                        ];
                    }

                    //去重服订单ID
                    $orderIds = array_unique($orderIds, SORT_REGULAR);
                    //根据订单ID查询订单信息 组装入库数据
                    foreach ($orderIds as $key=>$val) {
                        //获取订单
                        $order = (new OrderCommon())->where('order_id',$val['order_id'])->find();
                        //入库
                        $dataTable[] = [
                            'aid'               => isset($params['aid']) ? $params['aid'] : 0,
                            'return_sn'         => $order['site_id'] . date('Ymd') . rand(10000, 99999),
                            'mall_id'           => $order['mall_id'],
                            'site_id'           => $order['site_id'],
                            'buyer_id'          => $order['buyer_id'],
                            'order_id'          => $order['order_id'],
                            'order_sn'          => $order['order_sn'],
                            'refund_price'      => 0,
                            'refund_type'       => $order['order_payment_code'],
                            'create_time'       => time(),
                            'bind_sn'           => $bindSn,
                            'created_at'        => date("Y-m-d H:i:s"),
                        ];
                    }

                    Db::startTrans();
                    try{
                        //生成退货单
                        (new OrderReturnTable())->insertAll($dataTable);
                        //将退货商品入商品库
                        (new OrderReturnTableGoods())->insertAll($data);
                        Db::commit();
                        return ['status'=>true,'msg'=>'操作成功','data'=>urlencode(json_encode($data)),'bind'=>$bindSn];
                    }catch (PDOException $e){
                        Db::rollback();
                        return ['status'=>false,'msg'=>'操作失败'];
                    }
                }
            }
        }
        return [];
    }

    /*
        作用：根据二维数组中的部分键值判断二维数组中是否有重复值
        参数：
            $arr  —— 目标数组
            $keys —— 要进行判断的键值组合的数组
        返回：重复的值
        扩展：判断的键值
    */
    public function getRepeat($arr,$keys) {
        $unique_arr = array();
        $repeat_arr = array();
        foreach ($arr as $k => $v) {
            $str = "";
            foreach ($keys as $a => $b) {
                $str .= "{$v[$b]},";
            }
            if( !in_array($str, $unique_arr) ){
                $unique_arr[] = $str;
            } else {
                $repeat_arr[] = $v;
            }
        }
        return $repeat_arr;
    }

    /**
     * 歩奏二
     * @return mixed
     * @throws Exception
     */
    public function step_2()
    {

        $params = $this->request->param();
        if(isset($params['goods']) && !empty($params['goods']))
        {
            //url解码
            $good = urldecode($params['goods']);
            $goodsList = json_decode($good,true);
            foreach ($goodsList as $good=>$goods) {
                $data[] = [
                    'mall_id'       => $goods['mall_id'],
                    'site_id'       => $goods['site_id'],
                    'order_id'      => $goods['order_id'],
                    'order_osp_id'  => $goods['order_osp_id'],
                    'goods_id'      => $goods['goods_id'],
                    'goods_bn'      => $goods['goods_bn'],
                    'bind_bn'       => $params['bind'],
                    'goods_name'    => $goods['goods_name'],
                    'osp_price'     => $goods['osp_price'],
                    'osp_price_sum'     => $goods['osp_price_sum'],
                    'goods_num'         => $goods['goods_num'],
                    'goods_return_num'      => $goods['goods_return_num'],
                    'created_at'            => $goods['created_at'],
                ];
            }
        }else
            $data = [];

        $this->assign('goodsData',$data);
        return $this->fetch();
    }

    /**
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function step_2_return_table()
    {
        if($this->request->isAjax()) {
            $params = $this->request->param();
            if ($params)
            {
                $where = [];
                $page = !empty($params['page']) ? $params['page'] : 1;
                $limit = !empty($params['limit']) ? $params['limit'] : 10;
                $buyerId = !empty($params['buyerId']) ? $params['buyerId'] : 0;
                $bind = !empty($params['bind']) ? $params['bind'] : '';
                $where['buyer_id'] = $buyerId;
                $where['bind_sn'] = $bind;
                list($where,$page,$limit) = [$where,$page,$limit];

                $list = (new OrderReturnTable())
                    ->where($where)
                    ->page($page,$limit)
                    ->select();

                $total = (new OrderReturnTable())
                    ->where($where)
                    ->count();

                foreach ($list as $k=>$v) {
                    $list[$k]['price'] = OrderReturnTableGoods::sum_goods_price($v['order_id'],$bind)['price'];
                    $list[$k]['refund_price_sum'] = OrderReturnTableGoods::sum_goods_price($v['order_id'],$bind)['priceSum'];
                    $list[$k]['refund_type_name'] = OrderReturnTable::pay_code_type($v['refund_type']);
                }
                $results = array("code"=>0,"count" => $total, "data" => $list);
                return json($results);
            }
            return [];
        }
        return [];
    }


    /**
     * 查看商品
     * @param $sn [订单绑定标识]
     * @return mixed
     */
    public function step_2_get_return_goods($orderId=null,$sn=null)
    {
        $this->view->engine->layout(false);

        $sn = isset($sn) ? $sn : $this->request->param('bindBn');
        $orderId = isset($orderId) ? $orderId : $this->request->param('orderId');
        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where = [];
                $page = !empty($params['page']) ? $params['page'] : $this->request->param('page');
                $limit = !empty($params['limit']) ? $params['limit'] : $this->request->param('limit');
                $where['order_id'] = !empty($params['orderId']) ? $params['orderId'] : $this->request->param('orderId');
                $where['bind_bn'] = !empty($params['bindBn']) ? $params['bindBn'] : $this->request->param('bindBn');
                list($where,$page,$limit) = [$where,$page,$limit];
                $list = (new OrderReturnTableGoods())
                    ->where($where)
                    ->page($page,$limit)
                    ->select();

                $total = (new OrderReturnTableGoods())
                    ->where($where)
                    ->count();

                $results = array("code"=>0,"count" => $total, "data" => $list);
                return json($results);
            }
        }
        $this->assign('good',['orderId'=>$orderId,'bindBn'=>$sn]);
        return $this->fetch();
    }


    /**
     * 调整退款价格
     * @return array
     * @throws Exception
     */
    public function step_2_update_table_price()
    {
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                try{

                    //查询退货单信息
                    $get = OrderReturnTable::get(['order_id'=>$params['orderId'],'bind_sn'=>$params['bindSn']]);
                    if(!$get)
                        return ['status'=>false,'msg'=>'修改数据不存在'];
                    //修改价格不能小于零
                    if($params['refund_price'] <= 0){
                        return ['status'=>false,'msg'=>'价格不能低于零'];
                    }
                    //获取退款单商品的价格计算
                    $goodsPrice = OrderReturnTableGoods::sum_goods_price($params['orderId'],$params['bindSn'])['priceSum'];
                    if($params['refund_price'] > $goodsPrice)
                    {
                        return ['status'=>false,'msg'=>'价格超出预退款价格'];
                    }
                    (new OrderReturnTable())->updateRefundPrice($params['orderId'],$params['bindSn'],$params['refund_price']);
                    return ['status'=>true,'msg'=>'操作成功'];
                }catch (PDOException $e){
                    return ['status'=>false,'msg'=>'意外异常错误：'.$e->getMessage()];
                }
            }
        }
        return [];
    }


    public function step_3()
    {

        $goods = $this->request->param('goods');
        $goodsList = json_decode($goods,true);

        if(!empty($goodsList))
        {
            //遍历制单 完成退货单
            foreach ($goodsList as $key=>$val) {
                //检测入过库的排除

                $data = [
                    'mall_id' => $val['mall_id'],
                    'site_id' => $val['site_id'],
                    'order_id' => $val['order_id'],
                    'order_sn' => $val['order_sn'],
                    'return_sn' => $val['return_sn'],
                    'buyer_id' => $val['buyer_id'],
                    'refund_type' => 1,
                    'refund_price' => $val['refund_price'],
                    'refund_amount' => $val['refund_price'],
                    'return_pay_code' => $val['refund_type'],
                    'is_come_get' => 1,
                    'osp_price' => $val['refund_price'],
                    'phone' => $val['mall_id'],
                    'address' => $val['mall_id'],
                    'return_reason' => '',
                    'is_shipping_type' => 'mall',
                    'is_add' => $val['mall_id'],
                    'is_all' => '',
                    'create_time' => time(),
                    'created_at' => $val['created_at'],
                    'status'     => 2,
                ];
//                OrderReturn::addReturnData($data);
            }

        }

        return $this->fetch();
    }




    /**
     * 跳转制单
     * @return mixed
     */
    public function makeBill()
    {

        $type = $this->request->param('type');
        if($type == 'a') //主动制单
        {


        }else if($type == 'e') //被动制单
        {

        }else{
            $this->error('没有该制单状态');
        }



        return $this->fetch();
    }


    public function getBuyer()
    {
        if($this->request->isAjax())
        {
            $page = $this->request->param('page');
            $limit = $this->request->param('limit');
            $where=[];
            //获取有效用户
            $where[] = ['buyer_header','<>',""];
            $buyer = (new Buyer())->where($where)->select();
            return ['count'=>count($buyer),'dataList'=>$buyer];
        }
        return [];
    }

    public function getOrder()
    {
        if($this->request->isAjax())
        {
            $params = $this->request->param();
            $order = (new OrderCommon())->where(['buyer_id'=>$params['buyer_id']])->whereIn('order_state',[40,50,60])->select();

            return ['count'=>count($order),'dataList'=>$order];
        }
    }

    public function getGoods()
    {
        $this->view->engine->layout(false);
        if($this->request->isPost())
        {
            $orderId = $this->request->param('order_id');

            $orderGoods = (new OrderGoods())->where('order_id',$orderId)->select();

            $this->assign('goods',$orderGoods);

            return ['status'=>true,'msg'=>'','data'=>$this->fetch()];
        }
    }

    public function getOrderGoods()
    {
        if($this->request->isAjax())
        {

            $where = [];
            $page  = $this->request->param('page');
            $limit = $this->request->param('limit');

            list($where,$page,$limit) = [$where,$page,$limit];

            $list = (new OrderGoods())
                ->where($where)
                ->order('osp_id','desc')
                ->page($page,$limit)
                ->select();

            $total = (new OrderGoods())
                ->where($where)
                ->count();

            $result = array("code"=>0,"count" => $total, "data" => $list);

            return json($result);

        }
        return [];
    }

    /**
     * @return array
     */
    public function saveTableAndGoods()
    {
        if($this->request->isAjax())
        {
            $params = $this->request->param();

            return ['status'=>true,'data'=>$params];
        }
        return [];
    }

}