<?php
/**
 * Created by PhpStorm.
 * User: Lyunp
 * Date: 2019/9/3
 * Time: 18:28
 */

namespace app\mall\controller;


use app\common\controller\Mall;
use app\common\model\HotSearch;
use think\Db;
use think\exception\PDOException;
use think\Request;
use think\Validate;

class Search extends Mall
{

    protected $model = null;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = (new HotSearch());
    }

    /**
     * 查看
     * @return array|mixed|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function index()
    {
        //获取权限的筛选条件
        $userWhere = $this->getMyUserWhere();
        $areaId = isset($userWhere[self::PERMISSION_MALL]) ? $userWhere[self::PERMISSION_MALL] : 0;
        if(empty($areaId)){
            return [
                'status' => false,
                'msg' => '只有区域管理员才有权限打开此界面'
            ];
        }

        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $where=[];
                $page = $this->request->get("page", 0);
                $limit = $this->request->get("limit", 0);

                $where['mall_id'] = $areaId;
                list($where,$page,$limit) = [$where,$page,$limit];

                $list = Db::name('hot_search')
                    ->where($where)
//                    ->whereBetween('')
                    ->page($page,$limit)
                    ->select();
                $total = Db::name('hot_search')
                    ->where($where)
                    ->count();

                $status = ['1'=> '启用','2'=>'禁用'];
                foreach ($list as $key=>$value) {
                    $list[$key]['is_status'] = $status[$value['status']];
                }

                $result = array("code"=>0,"count" => $total, "data" => $list);
                return json($result);

            }
        }

        return $this->fetch();
    }

    /**
     * 添加搜索热词
     * @return array|mixed|\think\response\Json
     */
    public function add()
    {
        //获取权限的筛选条件
        $userWhere = $this->getMyUserWhere();
        $areaId = isset($userWhere[self::PERMISSION_MALL]) ? $userWhere[self::PERMISSION_MALL] : 0;
        if(empty($areaId)){
            return [
                'status' => false,
                'msg' => '只有区域管理员才有权限打开此界面'
            ];
        }
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                //判断是否录入过相同的区域关键词
                $keywords = $this->model->where(['mall_id'=>$areaId,'keywords'=>$params['keywords']])->find();
                if($params['keywords'] == $keywords->keywords)
                {
                    return ['status'=>false,'msg'=> '['.$params['keywords'].'],关键词已存在'];
                }

                $params['mall_id'] = $areaId;
                Db::startTrans();
                try{
                    $this->model->insert($params);
                    Db::commit();
                    return ['status'=>true,'msg'=>'操作成功'];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'操作失败'];
                }
            }
        }

        return $this->fetch();
    }

    /**
     * 编辑
     * @param null $id
     * @return array|mixed|\think\response\Json
     */
    public function edit($id=null)
    {
        $id = isset($id) ? $id : $this->request->param('id');
            if($id)
                $res = $this->model->get($id);
        //获取权限的筛选条件
        $userWhere = $this->getMyUserWhere();
        $areaId = isset($userWhere[self::PERMISSION_MALL]) ? $userWhere[self::PERMISSION_MALL] : 0;
        if(empty($areaId)){
            return [
                'status' => false,
                'msg' => '只有区域管理员才有权限打开此界面'
            ];
        }
        if($this->request->isPost())
        {
            $params = $this->request->param();
            if($params)
            {
                //验证
                $rule = [
                    'keywords'  => 'require',
                ];
                $msg = [
                    'keywords.require' => '热门词不能为空',
                ];
                $data = [
                    'keywords'  => $params['keywords'],
                ];
                $validate = Validate::make($rule,$msg);
                if (!$validate->check($data)) {
                    return json(['code'=>0,'msg'=>$validate->getError()]);
                }

                Db::startTrans();
                try{
                    $this->model->where(['id'=>$params['id'],'mall_id'=>$areaId])->update($params);
                    Db::commit();
                    return ['status'=>true,'msg'=>'操作成功'];
                }catch (PDOException $e){
                    Db::rollback();
                    return ['status'=>false,'msg'=>'操作失败'];
                }
            }
        }

        $this->assign('list',$res);
        return $this->fetch();
    }

    /**
     * 删除
     * @param null $id
     * @return array
     */
    public function delete($id=null)
    {
        $id = isset($id) ? $id : $this->request->param('id');
        if($id)
            $res = $this->model->where('id',$id)->delete();
            if(!$res)
            {
                return ['code'=>0,'msg'=>'删除失败'];
            }
            return [
                'msg'    => '删除成功',
                'status' => true,
            ];
    }

    /**
     * 修改权重
     * @return \think\response\Json
     */
    public function weight()
    {
        if($this->request->isAjax())
        {
            $params = $this->request->param();
            if($params)
            {
                $res = $this->model->where('id',$params['id'])->update(['weight'=>$params['weight']]);
                if($res)
                {
                    return json(['code'=>1,'status'=>true,'msg'=>'success']);
                }
            }
            return json(['code'=>0,'msg'=>'参数异常']);
        }
        return json(['code'=>0,'msg'=>'请求异常']);
    }

    /**
     * 停用
     * @return \think\response\Json
     */
    public function stop()
    {
        if($this->request->isGet())
        {
            $id = $this->request->param('id');
            if($id)
            {
                $now = $this->model->where('id',$id)->update(['status'=>2]);
                if($now)
                {
                    return json(['code'=>1,'status'=>true,'msg'=>'success']);
                }
            }

        }
        return json(['code'=>0,'msg'=>'请求异常']);
    }

    /**
     * 启用
     * @return \think\response\Json
     */
    public function open()
    {
        if($this->request->isGet())
        {
            $id = $this->request->param('id');
            if($id)
            {
                $now = $this->model->where('id',$id)->update(['status'=>1]);
                if($now)
                {
                    return json(['code'=>1,'status'=>true,'msg'=>'success']);
                }
            }
        }
        return json(['code'=>0,'msg'=>'请求异常']);
    }
    
}